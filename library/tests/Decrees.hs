-- | This module generated by the Quickpull package.
-- Quickpull is available at:
-- <http://www.github.com/massysett/quickpull>

module Decrees where

import Quickpull
import qualified Prednote.Core.Properties
import qualified Prednote.Prebuilt.Properties

decrees :: [Decree]
decrees =

  [ Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Core/Properties.hs", modName = ["Prednote","Core","Properties"]}, linenum = 13, qName = "prop_predicateIsLazyInFirstArgument"} ) ( Single Prednote.Core.Properties.prop_predicateIsLazyInFirstArgument )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Core/Properties.hs", modName = ["Prednote","Core","Properties"]}, linenum = 18, qName = "prop_predicateIsLazyInAnnotation"} ) ( Single Prednote.Core.Properties.prop_predicateIsLazyInAnnotation )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Core/Properties.hs", modName = ["Prednote","Core","Properties"]}, linenum = 24, qName = "prop_wrapIsLazyInChunks"} ) ( Single Prednote.Core.Properties.prop_wrapIsLazyInChunks )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Core/Properties.hs", modName = ["Prednote","Core","Properties"]}, linenum = 30, qName = "prop_wrapIsLazyInAnnotation"} ) ( Single Prednote.Core.Properties.prop_wrapIsLazyInAnnotation )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Core/Properties.hs", modName = ["Prednote","Core","Properties"]}, linenum = 37, qName = "prop_wrapIsLazyInStatic"} ) ( Single Prednote.Core.Properties.prop_wrapIsLazyInStatic )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Core/Properties.hs", modName = ["Prednote","Core","Properties"]}, linenum = 43, qName = "prop_switchIsLazyInChunks"} ) ( Single Prednote.Core.Properties.prop_switchIsLazyInChunks )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Core/Properties.hs", modName = ["Prednote","Core","Properties"]}, linenum = 49, qName = "prop_switchIsLazyInAnnotation"} ) ( Single Prednote.Core.Properties.prop_switchIsLazyInAnnotation )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Core/Properties.hs", modName = ["Prednote","Core","Properties"]}, linenum = 55, qName = "prop_switchIsLazyInFirstPred"} ) ( Single Prednote.Core.Properties.prop_switchIsLazyInFirstPred )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Core/Properties.hs", modName = ["Prednote","Core","Properties"]}, linenum = 62, qName = "prop_switchIsLazyInSecondPred"} ) ( Single Prednote.Core.Properties.prop_switchIsLazyInSecondPred )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 15, qName = "prop_trueReturnsTrue"} ) ( Single Prednote.Prebuilt.Properties.prop_trueReturnsTrue )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 17, qName = "prop_falseReturnsFalse"} ) ( Single Prednote.Prebuilt.Properties.prop_falseReturnsFalse )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 19, qName = "prop_sameReturnsSame"} ) ( Single Prednote.Prebuilt.Properties.prop_sameReturnsSame )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 21, qName = "prop_predicateDoesSameAsFunction"} ) ( Single Prednote.Prebuilt.Properties.prop_predicateDoesSameAsFunction )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 24, qName = "prop_andDoesSameAsPreludeAnd"} ) ( Single Prednote.Prebuilt.Properties.prop_andDoesSameAsPreludeAnd )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 31, qName = "prop_orDoesSameAsPreludeOr"} ) ( Single Prednote.Prebuilt.Properties.prop_orDoesSameAsPreludeOr )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 38, qName = "prop_andShortCircuitsOnFalse"} ) ( Single Prednote.Prebuilt.Properties.prop_andShortCircuitsOnFalse )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 41, qName = "prop_orShortCircuitsOnTrue"} ) ( Single Prednote.Prebuilt.Properties.prop_orShortCircuitsOnTrue )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 44, qName = "prop_notDoesSameAsPreludeNot"} ) ( Single Prednote.Prebuilt.Properties.prop_notDoesSameAsPreludeNot )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 47, qName = "prop_eitherWorksOnEitherSide"} ) ( Single Prednote.Prebuilt.Properties.prop_eitherWorksOnEitherSide )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 59, qName = "prop_maybe"} ) ( Single Prednote.Prebuilt.Properties.prop_maybe )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 71, qName = "prop_anySameAsPreludeAny"} ) ( Single Prednote.Prebuilt.Properties.prop_anySameAsPreludeAny )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 77, qName = "prop_allSameAsPreludeAll"} ) ( Single Prednote.Prebuilt.Properties.prop_allSameAsPreludeAll )
  , Decree ( Meta {modDesc = ModDesc {modPath = "tests/Prednote/Prebuilt/Properties.hs", modName = ["Prednote","Prebuilt","Properties"]}, linenum = 83, qName = "prop_wrapSameAsOriginal"} ) ( Single Prednote.Prebuilt.Properties.prop_wrapSameAsOriginal )
  ]
